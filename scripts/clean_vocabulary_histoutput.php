#!/usr/bin/env php
<?php
/**
 * Clean the Vocabulary
 *
 * @author Robbie Hott
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";
include "clean_vocabulary_sub.php";

use \Monolog\Logger;
use \Monolog\Handler\StreamHandler;

// Set up the global log stream
$log = new StreamHandler(\snac\Config::$LOG_DIR . \snac\Config::$SERVER_LOGFILE, Logger::DEBUG);

// SNAC Postgres DB Connector
$db = new \snac\server\database\DatabaseConnector();

$vocab = array();
echo "Querying vocabulary cache from the database.\n";

$vocQuery = $db->query("select id, type, value from
            vocabulary where type in ('subject', 'function', 'occupation');", array());
while($v = $db->fetchrow($vocQuery))
{
    if (!isset($vocab[$v["type"]]))
        $vocab[$v["type"]] = array();
    $vocab[$v["type"]][$v["id"]] = $v["value"];
}

echo "Current counts:\n  Subject: ".count($vocab["subject"])."\n  Functn:  ".count($vocab["function"])."\n  Occptn:  ".count($vocab["occupation"])."\n";
echo "  Total:   ". (count($vocab["subject"]) + count($vocab["function"]) + count($vocab["occupation"])) ."\n\n";

$clean = array(
    "subject" => [],
    "function" => [],
    "occupation" => []);

foreach ($vocab["subject"] as $k => $v) {
    fixup($v, $k, $clean["subject"]);
}

foreach ($vocab["function"] as $k => $v) {
    fixup($v, $k, $clean["function"]);
}

foreach ($vocab["occupation"] as $k => $v) {
    fixup($v, $k, $clean["occupation"]);
}


echo "Cleaned counts:\n  Subject: ".count($clean["subject"])."\n  Functn:  ".count($clean["function"])."\n  Occptn:  ".count($clean["occupation"])."\n";
echo "  Total:   ".(count($clean["subject"]) + count($clean["function"]) + count($clean["occupation"]))."\n\n";

usort($clean["subject"], function($a, $b) {
    return (count($a["originals"]) < count($b["originals"])) ? 1 : -1;
});
usort($clean["function"], function($a, $b) {
    return (count($a["originals"]) < count($b["originals"])) ? 1 : -1;
});

usort($clean["occupation"], function($a, $b) {
    return (count($a["originals"]) < count($b["originals"])) ? 1 : -1;
});

vote($clean["subject"]);
vote($clean["function"]);
vote($clean["occupation"]);


$sample = array("subject" => array(), "function" => array(), "occupation" => array());
for( $i = 0; $i < 10; $i++) {
    array_push($sample["subject"], $clean["subject"][$i]);
    array_push($sample["function"], $clean["function"][$i]);
    array_push($sample["occupation"], $clean["occupation"][$i]);
}

//echo json_encode($sample, JSON_PRETTY_PRINT);
echo "\n\n";

print_histogram(compute_histogram($clean["subject"]), "Subjects");
echo "\n\n";
print_histogram(compute_histogram($clean["function"]), "Functions");
echo "\n\n";
print_histogram(compute_histogram($clean["occupation"]), "Occupations");





#!/usr/bin/env php
<?php
/**
 * Bulk ingest of files given on standard input
 * 
 * @author Robbie Hott
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";

// Set STDIN to not block, so that we can give an error message if needed
stream_set_blocking(STDIN, 0);

// Did we parse a file?
$parsedFile = false;

$dbu = new snac\server\database\DBUtil();

list($appUserID, $role) = $dbu->getAppUserInfo('system');
printf("appUserID: %s role: %s\n", $appUserID, $role);

// Read through the lines of STDIN
while ($filename = trim(fgets(STDIN))) {
    $parsedFile = true;

    // Print out a message stating that this file is being parsed
    echo "Parsing: $filename\n";

    // Create new parser for this file and parse it
    $e = new \snac\util\EACCPFParser();
    $constellation = $e->parseFile($filename);

    // For each unparsable tag and attribute in the parsed EAC-CPF, print it out
    foreach ($e->getMissing() as $miss) {
        echo "  " .$miss. "\n"; 
    }

    // Insert the constellation into the database
    $vhInfo = $dbu->insertConstellation($constellation, $appUserID, $role, 'bulk ingest', 'bulk ingest of merged');
}

// If no file was parsed, then print the output that something went wrong
if ($parsedFile == false) {
    echo "No files given on STDIN\n\n"
        . "Reads a list of filenames from standard input (one per line),\n"
        . "then parses the files into Identity Constellations and prints\n"
        . "to standard output the list of tags from the given files that\n"
        . "this parser is incapable of capturing in an Identity\n"
        . "Constellation.\n\n"
        . "Sample usage: find /snac/data/ -name \"*.xml\" | ./bulk_ingest.php\n\n";

}


#!/usr/bin/env php
<?php
/**
 * Fix the vocabulary 
 *
 * @author Robbie Hott
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";

use \Monolog\Logger;
use \Monolog\Handler\StreamHandler;

// Set up the global log stream
$log = new StreamHandler("fix_relations.log", Logger::WARNING);

// SNAC Database Connectior
$db = new snac\server\database\DatabaseConnector();

// SNAC Postgres User Handler
$dbuser = new \snac\server\database\DBUser();
$tempUser = new \snac\data\User();
$tempUser->setUserName("system@localhost");
$user = $dbuser->readUser($tempUser);
$user->generateTemporarySession();

$query = "select rl.id, rl.version, rl.relation_entry, na.original as name_heading, na.ic_id, n.ark_id,n.entity_type from related_identity rl, name na, nrd n where rl.related_id is null and rl.relation_entry = na.original and na.ic_id = n.ic_id order by rl.id, rl.version, na.ic_id asc;";

$result = $db->query($query, array());

$data = array();
$duplicates = array();

while ($res = $db->fetchRow($result)) {
    if (isset($data[$res["id"]]) && isset($data[$res["id"]][$res["version"]])) {
        // This is a duplicate
        array_push($duplicates, $data[$res["id"]][$res["version"]]);
        array_push($duplicates, $res);
        unset($data[$res["id"]][$res["version"]]);
    } else {
        // second check for duplicates
        $duplicate = false;
        foreach ($duplicates as $dup) {
            if ($dup["id"] == $res["id"] && $dup["version"] == $res["version"]) {
                array_push($duplicates, $res);
                $duplicate = true;
                break;
            }
        }
        if ($duplicate) continue;

        // not a duplicate
        if (!isset($data[$res["id"]]))
            $data[$res["id"]] = array();

        $data[$res["id"]][$res["version"]] = $res;
    }
}

echo json_encode($data, JSON_PRETTY_PRINT) . "\n";
echo json_encode($duplicates, JSON_PRETTY_PRINT) . "\n";

$updateQ = "update related_identity set (related_id, related_ark, role) = ($1, $2, $3) where id = $4 and version = $5 and related_id is null;";
$db->prepare("update_relations", $updateQ);
    
foreach ($data as $id => $part) {
    foreach ($part as $version => $row) {
        echo "Updating ($id, $version):\t" . $row["relation_entry"] . "\n";
        $db->execute("update_relations", array($row["ic_id"], $row["ark_id"], $row["entity_type"], $id, $version));
    }
}

